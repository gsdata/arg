<?php
function arg_facultate_node_info() {
  return array(
      'arg_facultate' => array(
          'name' => t('Facultate'),
          'base' => 'arg_facultate',
          'description' => t('Folositi acest tip de continut pentru a crea o Facultate noua.'),
          'has_title' => TRUE,
          'title_label' => 'Numele Facultatii',
          'help' => t('Introduceti numele Facultatii,descrierea si datele de contact.'),
          ),
      );

}
function arg_facultate_form($node, $form_state){
 
  return node_content_form($node, $form_state);
}

function arg_facultate_form_alter(&$form, &$form_state,$form_id){
  $form['universitate_ref']['#access']=false;
  
  if($_GET['nid-universitate'] && $form_id == 'arg_facultate_node_form'){
	 $form['universitate_ref']['und'][0]['value']['#default_value'] = $_GET['nid-universitate'];
	 
  }
}

function arg_facultate_arg_core_butoane($nid, $type,$node){
	if($type == 'arg_facultate'){
		if(user_access('adauga bursa')){
			global $user;
			$query = "SELECT uid FROM {arg_utilizator_drepturi} WHERE uid=:uid AND nid=:nid AND drept='create'";
			$result = db_query($query,array(':uid' => $user->uid, ':nid' => $nid))->fetchField();
			if($result == $user->uid || $user->roles[3] == 'administrator'){
				$options['query'] = array(
					'nid-facultate' => $node['entity']->nid,
					'nid-universitate' => $node['entity']->universitate_ref['und'][0]['value'],
				);
				$output = l('Adauga bursa', 'node/add/arg-bursa', $options);
		
				return $output;
			}
		}
	}


}

function arg_facultate_arg_core_referinta_univ($nid, $type, $node){
	
	$nod_universitate = node_load($node['entity']->universitate_ref['und'][0]['value']);
	$output = l($nod_universitate->title, 'node/' . $nod_universitate->nid);
	return $output;
}


function arg_facultate_permission(){
	return array(
			'adauga facultate' => array(
					'title' => 'Adauga Facultate',
					'description' => 'Ofera posibilitatea de a adauga o facultate'
					),
			'update facultate' => array(
					'title' => 'Update Facultate',
					'description' => 'Ofera posibilitatea de a edita o facultate'
					),
			'delete facultate' => array(
					'title' => 'Delete Facultate',
					'description' => 'Ofera posibilitatea de a sterge o  facultate'
					),
			);
}

function arg_facultate_node_access($node, $op, $account){
	$type = is_string($node) ? $node : $node->type;
	if($type == 'arg_facultate'){
		switch ($op){
			case 'create':
				if(user_access('adauga facultate',$account)){
					//Dreptul de a adauga o facultate depinde de universitatea la care va fi creata
					if($_GET['nid-universitate']){
						$nid = $_GET['nid-universitate'];
					} else {
						$nid = -1;
					}
					$query = "SELECT uid FROM {arg_utilizator_drepturi} WHERE uid=:uid AND nid=:nid AND drept='create'";
					$result = db_query($query,array(':uid' => $account->uid, ':nid' => $nid))->fetchField();
					if($result == $account->uid){
						return NODE_ACCESS_ALLOW;
					}
				}
			case 'update':
				if(user_access('update facultate',$account)){
					$query = "SELECT uid FROM {arg_utilizator_drepturi} WHERE uid=:uid AND nid=:nid AND drept='edit'";
					$result = db_query($query,array(':uid' => $account->uid, ':nid' => $node->nid))->fetchField();
					if($result == $account->uid){
						return NODE_ACCESS_ALLOW;
					}
				}
			case 'delete':
				if(user_access('delete facultate',$account)){
					return NODE_ACCESS_ALLOW;
				}
		}
	}
}

function arg_facultate_node_insert($node){
	
	db_query("INSERT IGNORE INTO {arg_utilizator_drepturi} (uid,nid,drept) VALUES ($node->uid,$node->nid,'create')");
	db_query("INSERT IGNORE INTO {arg_utilizator_drepturi} (uid,nid,drept) VALUES ($node->uid,$node->nid,'edit')");
}

function arg_facultate_node_delete($node){
	
	db_query("DELETE FROM {arg_utilizator_drepturi} WHERE nid=$node->nid");
}

function arg_facultate_load($nodes){
	$nod = array_shift(array_values($nodes));
	$nid_referinta = db_query("SELECT universitate_ref_value FROM {field_data_universitate_ref} WHERE entity_id = $nod->nid")->fetchField();
	$result = db_query("SELECT title FROM {node} WHERE nid = $nid_referinta")->fetchField();
	$nodes[$nod->nid]->universitate_nume = $result;
}

function arg_facultate_token_info() {
  $info['tokens']['node']['token_oras_universitate'] = array(
    'name' => t('Token Oras'),
    'description' => t('Orasul Universitatii'),
  );
  $info['tokens']['node']['token_pseudonim_universitate'] = array(
    'name' => t('Token Pseudonim Universitate'),
    'description' => t('Pseudonimul universitatii'),
  );
  return $info;
}

function arg_facultate_tokens($type, $tokens, array $data = array(), array $options = array()) {
    $replacements = array();
    $sanitize = !empty($options['sanitize']);
    if ($type == 'node' && !empty($data['node'])) {
    	$node = $data['node'];
        foreach ($tokens as $name => $original) {
              switch($name){
              	case 'token_oras_universitate':
              		$nid_referinta = db_query("SELECT universitate_ref_value FROM {field_data_universitate_ref} WHERE entity_id = $node->nid")->fetchField();
              		$oras_universitate = db_query("SELECT field_oras_value FROM {field_data_field_oras} WHERE entity_id = $nid_referinta")->fetchField();
              		$replacements[$original] = $oras_universitate;
              		break;
              	case 'token_pseudonim_universitate':
              		$nid_referinta = db_query("SELECT universitate_ref_value FROM {field_data_universitate_ref} WHERE entity_id = $node->nid")->fetchField();
              		$pseudonim_universitate = db_query("SELECT pseudonim_value FROM {field_data_pseudonim} WHERE entity_id = $nid_referinta")->fetchField();
              		$replacements[$original] = $pseudonim_universitate;
              		break;
              }
        }
    }
    return $replacements;
}